name: Publish Android release

on:
  # Manual trigger so we can publish for existing tags like v1.0.30
  workflow_dispatch:
    inputs:
      tag:
        description: "Git tag to release (e.g., v1.0.30)"
        required: true
        type: string
  # Auto trigger for future tags
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # When dispatched manually, build the selected tag
          ref: ${{ github.event.inputs.tag || github.ref }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK packages
        run: |
          sdkmanager --install "platform-tools" "build-tools;35.0.0" "platforms;android-35"
          yes | sdkmanager --licenses

      - name: Make Gradle executable
        run: chmod +x gradlew

      - name: Build APKs and AAB
        run: ./gradlew --no-daemon assembleRelease assembleDebug bundleRelease -x test

      - name: Collect artifacts
        id: collect
        shell: bash
        run: |
          set -euo pipefail
          TAG="${{ github.event.inputs.tag }}"
          if [ -z "$TAG" ]; then TAG="${GITHUB_REF##*/}"; fi
          VERSION="${TAG#v}"
          OUT_DIR="release_artifacts_${VERSION}"
          mkdir -p "$OUT_DIR"

          # Find most recent outputs (handles custom build dirs if present)
          RELEASE_APK=$(find app -type f -name "app-release.apk" | sort | tail -n 1)
          DEBUG_APK=$(find app -type f -name "app-debug.apk" | sort | tail -n 1)
          RELEASE_AAB=$(find app -type f -name "app-release.aab" | sort | tail -n 1)

          if [ -z "$RELEASE_APK" ] || [ -z "$DEBUG_APK" ] || [ -z "$RELEASE_AAB" ]; then
            echo "Could not locate build outputs. Found:" >&2
            find app -type f -name "*.apk" -o -name "*.aab" | sed 's/^/ - /' >&2 || true
            exit 1
          fi

          cp "$RELEASE_APK" "$OUT_DIR/SkanniApp-${VERSION}-release.apk"
          cp "$DEBUG_APK"   "$OUT_DIR/SkanniApp-${VERSION}-debug.apk"
          cp "$RELEASE_AAB" "$OUT_DIR/SkanniApp-${VERSION}-release.aab"
          echo "out_dir=$OUT_DIR" >> $GITHUB_OUTPUT

      - name: Prepare release notes (optional)
        id: notes
        shell: bash
        run: |
          TAG="${{ github.event.inputs.tag || github.ref_name }}"
          NOTES_FILE="RELEASE_NOTES_${TAG}.md"
          if [ -f "$NOTES_FILE" ]; then
            echo "notes_path=$NOTES_FILE" >> $GITHUB_OUTPUT
          else
            # Fallback minimal notes
            printf "# %s\n\nAutomated release for %s. See commit history for details." "$TAG" "$TAG" > _AUTO_RELEASE_NOTES.md
            echo "notes_path=_AUTO_RELEASE_NOTES.md" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          name: ${{ github.event.inputs.tag || github.ref_name }}
          body_path: ${{ steps.notes.outputs.notes_path }}
          draft: false
          prerelease: false
          files: |
            ${{ steps.collect.outputs.out_dir }}/*.apk
            ${{ steps.collect.outputs.out_dir }}/*.aab
