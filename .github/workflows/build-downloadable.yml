name: Build APK & AAB (Quick Download)

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
          - debug
          - release
  # Tag trigger for quick release builds (avoids colliding with other release workflows)
  push:
    tags:
      - 'b*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Default to release for tag-triggered runs; use dispatch input when present
      BUILD_TYPE: ${{ github.event_name == 'workflow_dispatch' && inputs.build_type || 'release' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK packages
        run: |
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-35" "build-tools;35.0.0"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: true

      - name: Make gradlew executable
        run: chmod +x gradlew

      # Debug build (no signing needed)
      - name: Build Debug APK
        if: ${{ env.BUILD_TYPE == 'debug' }}
        run: ./gradlew --no-daemon :app:assembleDebug --stacktrace

      # Release build (will use debug keystore if no signing secrets)
      - name: Check if signing secrets are available
        id: check_secrets
        run: |
          if [ -n "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" ]; then
            echo "has_keystore=true" >> $GITHUB_OUTPUT
          else
            echo "has_keystore=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup signing (if available)
        if: ${{ env.BUILD_TYPE == 'release' && steps.check_secrets.outputs.has_keystore == 'true' }}
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > upload-keystore.jks
          cat > keystore.properties << EOF
          storeFile=upload-keystore.jks
          storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          EOF

      - name: Build Release APK
        if: ${{ env.BUILD_TYPE == 'release' }}
        run: ./gradlew --no-daemon :app:assembleRelease --stacktrace

      - name: Build Release AAB
        if: ${{ env.BUILD_TYPE == 'release' }}
        run: ./gradlew --no-daemon :app:bundleRelease --stacktrace

      # Find and upload artifacts
      - name: Find APK files
        id: find_apk
        run: |
          if [ "${{ env.BUILD_TYPE }}" = "debug" ]; then
            APK=$(find app/build*/outputs/apk/debug -name "*.apk" -type f | head -n 1)
          else
            APK=$(find app/build*/outputs/apk/release -name "*.apk" -type f | head -n 1)
          fi
          echo "apk_path=$APK" >> $GITHUB_OUTPUT
          echo "Found APK: $APK"

      - name: Find AAB file
        if: ${{ env.BUILD_TYPE == 'release' }}
        id: find_aab
        run: |
          AAB=$(find app/build*/outputs/bundle/release -name "*.aab" -type f | head -n 1)
          echo "aab_path=$AAB" >> $GITHUB_OUTPUT
          echo "Found AAB: $AAB"

      - name: Rename files with version
        id: rename_version
        run: |
          # Try to read versionName from Groovy or Kotlin DSL
          VERSION=""
          if [ -f app/build.gradle ]; then
            VERSION=$(grep -E "versionName\\s+['\"]" app/build.gradle | head -n 1 | sed -E "s/.*versionName\\s+['\"]([^'\"]+)['\"].*/\\1/")
          fi
          if [ -z "$VERSION" ] && [ -f app/build.gradle.kts ]; then
            VERSION=$(grep -E "versionName(\s*=|\s+)\s*\"" app/build.gradle.kts | head -n 1 | sed -E 's/.*versionName(\s*=|\s+)\s*"([^"]+)".*/\2/')
          fi
          if [ -z "$VERSION" ]; then
            VERSION="unknown"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          if [ -f "${{ steps.find_apk.outputs.apk_path }}" ]; then
            cp "${{ steps.find_apk.outputs.apk_path }}" "SkanniApp-v${VERSION}-${{ env.BUILD_TYPE }}.apk"
          fi
          if [ "${{ env.BUILD_TYPE }}" = "release" ] && [ -f "${{ steps.find_aab.outputs.aab_path }}" ]; then
            cp "${{ steps.find_aab.outputs.aab_path }}" "SkanniApp-v${VERSION}-release.aab"
          fi

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: SkanniApp-${{ env.BUILD_TYPE }}-apk
          path: SkanniApp-*.apk

      - name: Upload AAB
        if: ${{ env.BUILD_TYPE == 'release' }}
        uses: actions/upload-artifact@v4
        with:
          name: SkanniApp-release-aab
          path: SkanniApp-*.aab

      - name: Create download summary
        run: |
          echo "## âœ… Build Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“¦ Downloads:" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to the **Actions** tab" >> $GITHUB_STEP_SUMMARY
          echo "2. Click on this workflow run" >> $GITHUB_STEP_SUMMARY
          echo "3. Scroll down to **Artifacts**" >> $GITHUB_STEP_SUMMARY
          echo "4. Download:" >> $GITHUB_STEP_SUMMARY
          if [ "${{ env.BUILD_TYPE }}" = "debug" ]; then
            echo "   - **SkanniApp-debug-apk** - Debug APK fyrir testing" >> $GITHUB_STEP_SUMMARY
          else
            echo "   - **SkanniApp-release-apk** - Release APK fyrir installation" >> $GITHUB_STEP_SUMMARY
            echo "   - **SkanniApp-release-aab** - AAB fyrir Google Play" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“± Install APK:" >> $GITHUB_STEP_SUMMARY
          echo "1. Download APK file" >> $GITHUB_STEP_SUMMARY
          echo "2. Enable 'Unknown sources' in Android settings" >> $GITHUB_STEP_SUMMARY
          echo "3. Open the APK file to install" >> $GITHUB_STEP_SUMMARY
      - name: Create GitHub Release (on b* tag)
        if: ${{ startsWith(github.ref, 'refs/tags/b') }}
        uses: softprops/action-gh-release@v2
        with:
          name: SkanniApp ${{ github.ref_name }}
          files: |
            SkanniApp-*.apk
            SkanniApp-*.aab
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
